<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-07T09:46:29-05:00</updated><id>http://localhost:4000/</id><title type="html">Genie on FOSS</title><subtitle>Regina's blog for HFOSS class.</subtitle><entry><title type="html">Quiz1</title><link href="http://localhost:4000/hfoss/2018/03/07/quiz1.html" rel="alternate" type="text/html" title="Quiz1" /><published>2018-03-07T09:00:00-05:00</published><updated>2018-03-07T09:00:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/07/quiz1</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/07/quiz1.html">&lt;p&gt;1) Expanding each acronym&lt;/p&gt;

&lt;p&gt;1.1) IRC: Internet Relay Chat&lt;/p&gt;

&lt;p&gt;1.2) FOSS: Free and Open Source Software&lt;/p&gt;

&lt;p&gt;1.3) OLPC: One Laptop Per Child&lt;/p&gt;

&lt;p&gt;1.4) PR: Pull Request&lt;/p&gt;

&lt;p&gt;Bonus: GNU: GNU’s Not Unix&lt;/p&gt;

&lt;p&gt;2) What is the name of the visrion control system we use in this course?
git&lt;/p&gt;

&lt;p&gt;Bonus: SVN: Subversion&lt;/p&gt;

&lt;p&gt;3) Please give the one work name for the interface used in the OLPC computers &amp;amp; our VMs:
Sugar&lt;/p&gt;

&lt;p&gt;4) Bonus: What is the short, two-letter name for the OLPC computers used in the final project for this class?
XO&lt;/p&gt;

&lt;p&gt;5)We refer to sites that host source code as “forges.” What is the name for the primary forge used in this course?
GitHub&lt;/p&gt;

&lt;p&gt;6) Bonus: name the other forge we have used:
GitLabs&lt;/p&gt;

&lt;p&gt;7) Bonus: name another forge, one we have not used in this course.
BitBucket&lt;/p&gt;

&lt;h2 id=&quot;multiple-choice&quot;&gt;Multiple Choice&lt;/h2&gt;
&lt;p&gt;8) The GitHub-specific term to describe the process in which, starting from one repository hosted at GitHub, one creates another repository, also hosted at GitHub, but under the control of a different user account.&lt;/p&gt;

&lt;p&gt;d) fork&lt;/p&gt;

&lt;p&gt;9) A collection of related commit objects&lt;/p&gt;

&lt;p&gt;a) repository&lt;/p&gt;

&lt;p&gt;10) A separate, but related, repository from which one may fetch or pull changes into one’s own working copy, and to which in some instances one might have permission to push changes from one’s own working copy.&lt;/p&gt;

&lt;p&gt;c) remote&lt;/p&gt;

&lt;p&gt;11) The general term in git for making an exact, working copy of another repository in which changes can be tracked separately between the two versions.&lt;/p&gt;

&lt;p&gt;e) clone&lt;/p&gt;

&lt;p&gt;12) A namespace in which one can track changes to a set of files within a given repository. This term applies both to the action and to the result of the action. Comparisons (‘diffs’ or patches) can be made between different such namespaces.&lt;/p&gt;

&lt;p&gt;b) branch&lt;/p&gt;

&lt;p&gt;13) Consider the following (+1 for each correct, -1 for each incorrect):&lt;/p&gt;

&lt;p&gt;a) e59b627&lt;/p&gt;

&lt;p&gt;&lt;del&gt;b) 451.867&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;c) cf153fb32&lt;/p&gt;

&lt;p&gt;&lt;del&gt;d) dca_079&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;e) 9539807&lt;/p&gt;

&lt;p&gt;&lt;del&gt;f) DB6A60A&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;g) 614@1d4&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;h) be34fb47c60d&lt;/p&gt;

&lt;p&gt;Looking just at the string of non-space characters to the right of the close-parenthesis …&lt;/p&gt;

&lt;p&gt;List which of these could be a valid commit identifier?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;c&lt;/li&gt;
  &lt;li&gt;e&lt;/li&gt;
  &lt;li&gt;h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;14) We’ve discussed “the four R’s” as a shorthand for the freedoms attached to software for it to be considered “free” or “open source”. List or describe each. (eg, if you can remember the “r” word you can just give that. If you cannot remember the term, but can describe the freedom involved, that also counts). Various “r” words are roughly synonymous for some of the freedoms, but we’re counting freedoms here, not synonyms so if you give two (or more) terms for the same freedom, it only counts once. For the purposes of this quiz, “remix” does not count as describing any of them. (1pt each)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.1) Run

10.2) Read (the source)

10.3) Adapt to your liking, being able to change the software to fit your needs.

10.4) Redistribute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">1) Expanding each acronym</summary></entry><entry><title type="html">The Magic of Markdown</title><link href="http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown.html" rel="alternate" type="text/html" title="The Magic of Markdown" /><published>2018-03-06T00:00:00-05:00</published><updated>2018-03-06T00:00:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown.html">&lt;p&gt;So if you haven’t noticed so far in this blog, I’m a bit of a nerd. I really like playing tabletop RPGs, and I’m particularly fond of D&amp;amp;D 5e. I’m currently DMing a campaign for some of my friends (9 of them in fact, and yes I’m a badass DM for taking on that big of a group). Now I don’t always plan for my sessions (sometimes I use previous notes) but when I do I use markdown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/i-dont-always-dnd.jpg&quot; alt=&quot;I don't always plan for my D&amp;amp;D sessions but when I do, I do it in Markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This isn’t the only thing I use markdown for, I also use it for other things. I usually use it for notes, task lists (before I started mainly using trello), and I’m using it right now for blog posts. But what is markdown? Well it’s a very simple markup language used by many as a “simpler” html. Markdown is a way to easily wrote down significant amounts of text and then convert that text directly to html. It has syntax to simplify certain html tags but also supports having html directly in the document. It was &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;originally created by John Gruber&lt;/a&gt; but has been adapted by various people and communities into different &lt;a href=&quot;https://github.com/commonmark/CommonMark/wiki/Markdown-Flavors&quot;&gt;flavors&lt;/a&gt;. As you can see by the list of some of the flavors, there are quite a few of them. Although the basics tend to be the same they all add different capabilities to markdown. Those who dislike markdown often point to this lack of standardization as a disadvantage to the language. While this is true, I find that most of the time as long as you are consistent about which flavor you use there aren’t that many problems. However, markdown is very easy to read on it’s own, even when not rendered as html in a browser. This is also why I like markdown. A big reason I use markdown is because it is based in plain text and simple to understand on it’s own it is more future proof and not necessarily reliant on one product or app for notes &lt;em&gt;cough cough&lt;/em&gt; Microsoft Word &lt;em&gt;cough cough&lt;/em&gt;. It also doesn’t require the use of proprietary software which is nice.&lt;/p&gt;

&lt;p&gt;Speaking of tools, there are many FOSS editors you can use with markdown. You can use any plain text editor but I prefer the ones with syntax highlighting for markdown and those that provide a preview mode to show what it will look like when rendered in a browser as html. On my local computer I usually use &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; with the markdown plugin &lt;a href=&quot;https://github.com/atom-community/markdown-preview-plus&quot;&gt;Markdown Preview Plus (MPP)&lt;/a&gt;. I really like Atom, particularly it’s dark theme is really nice. 
&lt;img src=&quot;/assets/atom.png&quot; alt=&quot;Atom editor with preview package open&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use google drive a lot (RIT students get unlimited storage) so when I’m working on lab computers and want to remember to save my notes, I use StackEdit to make sure it’s in the drive. &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt; is an open source browser editor. It supports markdown and links directly into google drive. It also provides a markdown preview mode which is nice.&lt;/p&gt;

&lt;p&gt;There is a useful tool called &lt;a href=&quot;https://pandoc.org/&quot;&gt;pandoc&lt;/a&gt; which converts one kind of document to another. It supports a number of document types including markdown. It can be used to convert markdown to html or pdf or a multitude of formats. You can write a book in markdown and configure pandoc to convert it into various ebook/pdf formats.&lt;/p&gt;

&lt;p&gt;There are different markup languages that are similar to markdown, though I only really heard of these, I haven’t really used them. The closest one is probably &lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;reStructuredText&lt;/a&gt;, though &lt;a href=&quot;https://github.com/mundimark/awesome-markdown-alternatives&quot;&gt;there exists a list of alternatives&lt;/a&gt; that are close to markdown.&lt;/p&gt;

&lt;p&gt;Personally I love markdown and will continue to happily use it for various notes and writings.&lt;/p&gt;</content><author><name></name></author><summary type="html">So if you haven’t noticed so far in this blog, I’m a bit of a nerd. I really like playing tabletop RPGs, and I’m particularly fond of D&amp;amp;D 5e. I’m currently DMing a campaign for some of my friends (9 of them in fact, and yes I’m a badass DM for taking on that big of a group). Now I don’t always plan for my sessions (sometimes I use previous notes) but when I do I use markdown.</summary></entry><entry><title type="html">Litreview 2: NPM’s Epic Bug and Why Digital Infrastructure is Crumbling</title><link href="http://localhost:4000/hfoss/2018/03/05/litreview2.html" rel="alternate" type="text/html" title="Litreview 2:  NPM's Epic Bug and Why Digital Infrastructure is Crumbling" /><published>2018-03-05T00:59:00-05:00</published><updated>2018-03-05T00:59:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/05/litreview2</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/05/litreview2.html">&lt;h2 id=&quot;npm-bug&quot;&gt;NPM Bug&lt;/h2&gt;
&lt;p&gt;Our first reading was about a problematic &lt;a href=&quot;https://github.com/npm/npm/issues/19883&quot;&gt;NPM bug&lt;/a&gt; where Linux file permissions were being altered, that was written as an issue by the GitHub user Crunkle on February 22, 2018. The best way to describe the seriousness of the bug was the description that “People experiencing this bug will likely have to fully reinstall their system due to this update.” Yeah that’s a pretty big problem. Other than the bug itself, there was a lot of backlash in the comments of this issue because NPM made the 5.7.0 seem like a release as opposed to a pre-release which meant some users got confused and put this very broken code on production systems, which would then crash because of the issues. This set off a bit of a war in the comments. There were people calling each other incompetent because of their production upgrading procedures. Then there were people being very upset at and sometimes rude to the NPM devs for allowing such a big bug to be allowed in and making 5.7.0 look like a release. It got bad enough that the main collaborators locked the issue thread to collaborators. The issue was eventually fixed and 5.7.1 was released and 5.7.0 taken down.&lt;/p&gt;

&lt;p&gt;There are some things to be learned from this situation. It seems like the NPM developers need to be more clear about communicating which updates are releases and what is a pre-release. It seems their communication needs to be improved. Though it also seems to be that people got a little too overzealous and contributed more fuel to the fire instead of helping to resolve the situation. The NPM team seems to have handled this the best they could at the time. It’s hard to handle large amounts of backlash and according to the timestamps they handled the matter relatively quickly.&lt;/p&gt;

&lt;h2 id=&quot;why-digital-infrastructure-is-crumbling-and-foss-is-struggling&quot;&gt;Why Digital Infrastructure is Crumbling and FOSS is Struggling&lt;/h2&gt;
&lt;p&gt;Our second reading was &lt;a href=&quot;https://github.com/ritjoe/hfoss/blob/master/assets/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure.pdf&quot;&gt;Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal&lt;/a&gt; published on July 14, 2016, from the beginning up to page 77. This is a fascinating read. The author’s main point is that most of the software we know today is built upon open source software. Everything involves software now from out computers and smart-phones to doing regular tasks such as buying things online, paying bills, or going to the doctor. Every business has some sort of tech infrastructure. The overwhelming majority of this software uses something that is open source. Eghbal emphasizes the importance of FOSS as an essential part of our digital infrastructure. She also described the practical aspects of FOSS. Because the software is free developers are able to build applications faster and for a fraction of the cost when proprietary software was dominant. This makes is easier to for startups because of the dramatically reduced cost. It is also useful for education as the tools are free to use for teaching. As such it is essential to keep those open source projects going. However these FOSS projects are often not seen often because like roads and electricity most people don’t think about who’s managing it when they are using roads to drive their car or turning on a light switch. These projects need funding and contributors to keep going. Eghbal explains how some projects are large enough to get money through companies sponsoring them and through donations. Though some projects are able to sustain themselves through enterprise support or special features they can sell. Besides money there is the problem of getting enough contributors.&lt;/p&gt;

&lt;p&gt;The author covers that in open source’s early days there were a roughly an equal amount of people contributing to open source projects as there were those using it. This made the projects sustainable. In recent years there has been a dramatic increase in users and a decrease in people able to contribute. The author also talks about “magpie developers” who want to contribute to the new shiny projects as opposed to the older projects who need help also. Eghbal also describes a problem where some people in the open source community believe that there is a decrease in people able to contributre substantial code to the project. These developers are less experienced and so can’t contribute much code and/or create more work for the other contributors. This is where I disagree a bit. Although there are definitely people who are less experienced, it’s important to realize that all of us were at that stage at some point and to be compassionate about that. The key is to make sure a project is a welcoming community and helps to encourage those new developers to hone their skills and so will contribute better and better code as time goes on. This problem can be exacerbated by people who just see themselves as users and so only demand things of the project team. This doesn’t mean that those who are trying to contribute should be valued so much less so because their skills are not coding. Projects need to invest in new developers.&lt;/p&gt;

&lt;p&gt;The other problem often has to do with depending on the one or two maintainers to be the sole administrative force of the project while doing a lot of the coding. It seems that there are quite a few projects need to have better organization. What doesn’t help is that those who start the project are often the people who just want to code not be a project manager. This can be where people who don’t code or who don’t code that much can help out with open source.&lt;/p&gt;

&lt;p&gt;Overall I really enjoyed this read about issues in FOSS and the wider effects of that although I didn’t quite agree with everything the author said.&lt;/p&gt;</content><author><name></name></author><summary type="html">NPM Bug Our first reading was about a problematic NPM bug where Linux file permissions were being altered, that was written as an issue by the GitHub user Crunkle on February 22, 2018. The best way to describe the seriousness of the bug was the description that “People experiencing this bug will likely have to fully reinstall their system due to this update.” Yeah that’s a pretty big problem. Other than the bug itself, there was a lot of backlash in the comments of this issue because NPM made the 5.7.0 seem like a release as opposed to a pre-release which meant some users got confused and put this very broken code on production systems, which would then crash because of the issues. This set off a bit of a war in the comments. There were people calling each other incompetent because of their production upgrading procedures. Then there were people being very upset at and sometimes rude to the NPM devs for allowing such a big bug to be allowed in and making 5.7.0 look like a release. It got bad enough that the main collaborators locked the issue thread to collaborators. The issue was eventually fixed and 5.7.1 was released and 5.7.0 taken down.</summary></entry><entry><title type="html">Mirror Mirror On The Wall…</title><link href="http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall.html" rel="alternate" type="text/html" title="Mirror Mirror On The Wall..." /><published>2018-02-27T00:00:01-05:00</published><updated>2018-02-27T00:00:01-05:00</updated><id>http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall.html">&lt;p&gt;I happen to be very involved with the Women in Computing organization at RIT. In particular I’m involved with Projects Committee, of which I’m the committee head. Every year the committee picks a project to do, this year we are doing a magic mirror or smart mirror. A magic mirror is a monitor usually hooked up to a raspberry pi where white text is displayed on a black background. The monitor is covered by a one way mirror, usually a piece of acrylic with one side see through and the other reflective. The white text shines through the see through side, creating the effect of a mirror surface that has useful text such as the time or the weather.&lt;/p&gt;

&lt;p&gt;Our mirror currently uses the open source &lt;a href=&quot;https://github.com/MichMich/MagicMirror&quot;&gt;Magic Mirror&lt;/a&gt; software. Their tag line is “The open source modular smart mirror platform” which is truly the best way to sum it up. It takes care of most of the code for us. It has many useful modules that come by default like the time and date, calendar, weather, news, and a fun little module called compliments which regularly cycles compliments. There is a very large community around the Magic Mirror software and so has an extensive &lt;a href=&quot;https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules&quot;&gt;list of 3rd party modules&lt;/a&gt; that are often released as open source and so available to use. They are very easy to setup as well as remove and modify. It is as modular as they claim it to be. Modules are built in Javascript that generates HTML and CSS. If you can’t find something that lines up with what you want to do, there is plenty of &lt;a href=&quot;https://github.com/MichMich/MagicMirror/tree/master/modules&quot;&gt;documentation available&lt;/a&gt; to help you build your own. The committee may wind up doing this as we can’t seem to find a module that easily matches the voice control we want to have for the mirror. We fully intend to release our module as open source and are currently documenting our progress. Hopefully there will be another blog post on our adventures in module making!&lt;/p&gt;</content><author><name></name></author><summary type="html">I happen to be very involved with the Women in Computing organization at RIT. In particular I’m involved with Projects Committee, of which I’m the committee head. Every year the committee picks a project to do, this year we are doing a magic mirror or smart mirror. A magic mirror is a monitor usually hooked up to a raspberry pi where white text is displayed on a black background. The monitor is covered by a one way mirror, usually a piece of acrylic with one side see through and the other reflective. The white text shines through the see through side, creating the effect of a mirror surface that has useful text such as the time or the weather.</summary></entry><entry><title type="html">Bugfix Assignment</title><link href="http://localhost:4000/hfoss/2018/02/21/bugfix-assignment.html" rel="alternate" type="text/html" title="Bugfix Assignment" /><published>2018-02-21T00:00:02-05:00</published><updated>2018-02-21T00:00:02-05:00</updated><id>http://localhost:4000/hfoss/2018/02/21/bugfix-assignment</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/21/bugfix-assignment.html">&lt;p&gt;I’m currently the designer for RITLUG’s (RIT Linux User’s Group) project &lt;a href=&quot;https://github.com/RITlug/TigerOS&quot;&gt;TigerOS&lt;/a&gt;. The project is a Fedora remix aimed at making it easier for RIT students getting into Linux. I had already created the mascot, our tiger penguin, and wallpapers to go with it. After making some adjustments to the wallpapers, the team alerted me that because the font I used for the wallpapers is not default installed on most machines so trying to open the source file for the wallpaper without the font would cause horrible things to happen. Whoops. We decided to add that you needed to install the font to be able to work with the wallpapers to the design documentation. We were also missing documentation on how to export the new assets in the file structure so they would be included in the OS on install. So I added that &lt;a href=&quot;https://github.com/RITlug/TigerOS/wiki/TigerOS-Design&quot;&gt;documentation to our wiki&lt;/a&gt;. The wiki is through GitHub’s native wiki so there was no pull request but you can see &lt;a href=&quot;https://github.com/RITlug/TigerOS/wiki/TigerOS-Design/_history&quot;&gt;my edits in revisions&lt;/a&gt; and it was ultimately approved through &lt;a href=&quot;https://github.com/RITlug/TigerOS/issues/96&quot;&gt;closing the associated issue&lt;/a&gt;. A lot of our discussions were through in person meetings but there were also some slack conversations reproduced below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Regina Locicero [3:08 PM]
@ctmartin did you want me to change the font? that's the only thing we're iffy about, I'm pretty sure you guys said just to export it to .jpg and 1080p
and it would be fine

Christian Martin [3:08 PM]
@gen1e the font is perfectly ok, the issues with it were to do with needing the font installed nativey in order to properly render

Regina Locicero [3:09 PM]
Then everything is resolved with that issue

Tim Zabel [3:09 PM]
@ctmartin In order to fully remove this issue, it seems we are using Roboto font. We should probably install Roboto font on the default install if it isn't already

Christian Martin [3:10 PM]
@Tjzabel21 Install not needed on TigerOS, we should just have a wiki page for the design and notate it in there

Tim Zabel [3:11 PM]
Sounds good. I'll reopen the issue, and add a note that we should have documentation that states we use the Roboto font.

Christian Martin [3:11 PM]
@Tjzabel21 make a new issue and tag it with docs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As for actually creating the documentation for the bugfix it wasn’t too difficult. The hardest part was making the export documentation. Because of how Fedora works, we have to replace some of the assets used in the system with our own logo through putting them with specific names, in specific sizes, in a specific file structure. Going back through that structure and figuring out what would need to be replaced when the logo was updated was a bit of a pain but necessary. I feel better knowing that any potential designers know what they need to do when a design is approved and it’s time to implement.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m currently the designer for RITLUG’s (RIT Linux User’s Group) project TigerOS. The project is a Fedora remix aimed at making it easier for RIT students getting into Linux. I had already created the mascot, our tiger penguin, and wallpapers to go with it. After making some adjustments to the wallpapers, the team alerted me that because the font I used for the wallpapers is not default installed on most machines so trying to open the source file for the wallpaper without the font would cause horrible things to happen. Whoops. We decided to add that you needed to install the font to be able to work with the wallpapers to the design documentation. We were also missing documentation on how to export the new assets in the file structure so they would be included in the OS on install. So I added that documentation to our wiki. The wiki is through GitHub’s native wiki so there was no pull request but you can see my edits in revisions and it was ultimately approved through closing the associated issue. A lot of our discussions were through in person meetings but there were also some slack conversations reproduced below:</summary></entry><entry><title type="html">Pepper &amp;amp; Carrot: A Great Webcomic that happens to be FOSS</title><link href="http://localhost:4000/hfoss/2018/02/21/pepper-and-carrot-foss.html" rel="alternate" type="text/html" title="Pepper &amp; Carrot: A Great Webcomic that happens to be FOSS" /><published>2018-02-21T00:00:01-05:00</published><updated>2018-02-21T00:00:01-05:00</updated><id>http://localhost:4000/hfoss/2018/02/21/pepper-and-carrot-foss</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/21/pepper-and-carrot-foss.html">&lt;p&gt;One of my favorite webcomics ever is &lt;a href=&quot;https://www.peppercarrot.com/en/static3/webcomics&quot;&gt;Pepper &amp;amp; Carrot&lt;/a&gt;. Its about a young witch named Pepper who is not very good at witching and her adventures with her tabby cat companion Carrot. IT IS ADORABLE! Like seriously it’s so incredibly cute. It’s created by an awesome French artist named David Reevoy. Not only is he talented but he’s also super into open source. As part of this his software work flow is completely open source for Pepper &amp;amp; Carrot.  He uses Krita for his drawing, Blender for textures, and GIMP and Inkscape for other touch ups and adding text. He also creates the webcomic with a certain &lt;a href=&quot;https://www.peppercarrot.com/en/static2/philosophy&quot;&gt;philosophy&lt;/a&gt; in mind. He believes that all of Pepper &amp;amp; Carrot should be open source. He does this by licensing the work under Creative Commons and making the assets he used freely available. He has a &lt;a href=&quot;https://www.patreon.com/davidrevoy&quot;&gt;Patreon page&lt;/a&gt; that allows people to support him but any content that is posted on their is also posted on the public Pepper &amp;amp; Carrot website because he doesn’t want to lock anything behind a pay-wall.&lt;/p&gt;

&lt;p&gt;The really cool thing was that people actually use the permissive license to remix his work. There was a very popular &lt;a href=&quot;https://www.youtube.com/watch?v=cTb1_w8hvqY&quot;&gt;animation of his comic&lt;/a&gt; lead by Nikolai Mamashev and Konstantin Dmitriev. They used open source tools to animate Reevoy’s comic. They did an &lt;a href=&quot;https://opensource.com/article/17/6/web-comic-open-license&quot;&gt;interview with opensource.com&lt;/a&gt; if you want to learn more about their project.&lt;/p&gt;

&lt;p&gt;Pepper &amp;amp; Carrot is a great example of a successful creative commons/open source artistic creation. The creator is still able to support himself while still keeping his work open source. The community also actually uses this permissive licensing to actually do some cool remixes of his work. It also shows that something of great quality can come from using FOSS software and that FOSS creative tools don’t mean a sacrifice in outputted art quality. It’s super awesome, check it out, it’s definitely worth the read.&lt;/p&gt;</content><author><name></name></author><summary type="html">One of my favorite webcomics ever is Pepper &amp;amp; Carrot. Its about a young witch named Pepper who is not very good at witching and her adventures with her tabby cat companion Carrot. IT IS ADORABLE! Like seriously it’s so incredibly cute. It’s created by an awesome French artist named David Reevoy. Not only is he talented but he’s also super into open source. As part of this his software work flow is completely open source for Pepper &amp;amp; Carrot. He uses Krita for his drawing, Blender for textures, and GIMP and Inkscape for other touch ups and adding text. He also creates the webcomic with a certain philosophy in mind. He believes that all of Pepper &amp;amp; Carrot should be open source. He does this by licensing the work under Creative Commons and making the assets he used freely available. He has a Patreon page that allows people to support him but any content that is posted on their is also posted on the public Pepper &amp;amp; Carrot website because he doesn’t want to lock anything behind a pay-wall.</summary></entry><entry><title type="html">Making Happy Little Mountains with Krita</title><link href="http://localhost:4000/hfoss/2018/02/21/making-happy-little-mountains-with-krita.html" rel="alternate" type="text/html" title="Making Happy Little Mountains with Krita" /><published>2018-02-21T00:00:00-05:00</published><updated>2018-02-21T00:00:00-05:00</updated><id>http://localhost:4000/hfoss/2018/02/21/making-happy-little-mountains-with-krita</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/21/making-happy-little-mountains-with-krita.html">&lt;p&gt;I usually don’t do art but since I’ve gone to college I’ve been embracing my creative side more. As this had been happening I was also looking at FOSS digital art and/or design programs as the industry standard Adobe products cost an arm and a leg for each program. I came across the standard FOSS tools usually mentioned such as GIMP as a Photoshop replacement and Inkscape as a Illustrator replacement but I also came across Krita, which is an open source digital painting program. From what I’ve gathered many industry standard artists use Photoshop’s brushes or other proprietary software for digital drawing. However there are many professional artists that use Krita to make stunning art pieces. In fact, a popular webcomic &lt;a href=&quot;https://www.peppercarrot.com/&quot;&gt;Pepper &amp;amp; Carrot&lt;/a&gt; is created primarily using Krita by a French artist David Revoy. His comic is phenomenal and is deserving of it’s own post (which I will link to when it’s created), but here it is a good representation of the potential of what is possible with Krita.&lt;/p&gt;

&lt;p&gt;Krita, like many drawing programs, really needs a drawing tablet. Unfortunately, these cost money. Before buying a tablet for Krita, you probably want to check out &lt;a href=&quot;https://docs.krita.org/List_of_Tablets_Supported&quot;&gt;the list of supported tablets&lt;/a&gt;. If you already have one it’s probably supported, Krita seems to be pretty good about that. I personally have a Wacom Intuos Draw, I played with the software that came with it but I found Krita much more powerful.&lt;/p&gt;

&lt;p&gt;Krita takes a bit of time to learn, but it’s interface is at least somewhat intuitive. The Krita community provides &lt;a href=&quot;https://docs.krita.org/Main_Page&quot;&gt;a lot of documentation&lt;/a&gt; for Krita’s features and also includes a lot of tutorials. They also link to &lt;a href=&quot;https://docs.krita.org/External_Training_and_Tutorials&quot;&gt;external tutorials&lt;/a&gt; and links to various resources such as &lt;a href=&quot;https://docs.krita.org/Resources&quot;&gt;brush packs&lt;/a&gt;. Although slightly outdated now, the tutorial I used to learn the basics of Krita was the &lt;a href=&quot;https://www.youtube.com/watch?v=8FfVnEIkA3I&amp;amp;list=PLaGRTLvEbVzybijtYZRy4EoGrx6Bq_xOG&quot;&gt;“Learn Krita with Bob Ross” series&lt;/a&gt; by the channel &lt;a href=&quot;https://www.youtube.com/channel/UCkKFLSJjYtKNdFy3P7Q-CAA&quot;&gt;Age of Asparagus&lt;/a&gt; on YouTube. It was really fun to be able to learn how to use Krita while re-creating a Bob Ross painting. As a side note if you have heard of or have seen Bob Ross in action, his entire collection of “The Joy of Painting” video series is &lt;a href=&quot;https://www.youtube.com/user/BobRossInc&quot;&gt;up for free on YouTube&lt;/a&gt;, watching him create a painting is like calming magic, I highly recommend giving it a watch on a boring or frustrating day.&lt;/p&gt;

&lt;p&gt;Krita offers quite a few features. It has the standard layers that most graphic programs have. Krita does come with a preset of basic brushes which can be used as a base to make your own brushes customized to your artistic needs. I find that the brush generator is very intuitive and is helpful in letting you try out the brush as you adjust it. Krita integrates well with the programmable buttons on many drawing tablets and pens. It has a quick pop-up pallet that has the brush set you are currently using. You can tag your own brushes to create your own set and be able to see them among other brushes. It’s also very easy to export and import brushes. David Reevoy has his &lt;a href=&quot;https://github.com/Deevad/deevad-krita-brushpresets&quot;&gt;own set of brushes&lt;/a&gt; that are very popular and I find very useful. I’ve personally used Krita to help create a mottled background for wallpaper for &lt;a href=&quot;http://tigeros.ritlug.com/&quot;&gt;TigerOS&lt;/a&gt;,  a Fedora remix aimed at RIT students. I used one of Reevoy’s brushes to make it. Overall I consider a great tool that is definitely worth checking out for digital artists.&lt;/p&gt;</content><author><name></name></author><summary type="html">I usually don’t do art but since I’ve gone to college I’ve been embracing my creative side more. As this had been happening I was also looking at FOSS digital art and/or design programs as the industry standard Adobe products cost an arm and a leg for each program. I came across the standard FOSS tools usually mentioned such as GIMP as a Photoshop replacement and Inkscape as a Illustrator replacement but I also came across Krita, which is an open source digital painting program. From what I’ve gathered many industry standard artists use Photoshop’s brushes or other proprietary software for digital drawing. However there are many professional artists that use Krita to make stunning art pieces. In fact, a popular webcomic Pepper &amp;amp; Carrot is created primarily using Krita by a French artist David Revoy. His comic is phenomenal and is deserving of it’s own post (which I will link to when it’s created), but here it is a good representation of the potential of what is possible with Krita.</summary></entry><entry><title type="html">My Love Hate Relationship with Twine and Harlowe</title><link href="http://localhost:4000/hfoss/2018/02/13/my-love-hate-relationship-with-twine-and-harlowe.html" rel="alternate" type="text/html" title="My Love Hate Relationship with Twine and Harlowe" /><published>2018-02-13T11:04:54-05:00</published><updated>2018-02-13T11:04:54-05:00</updated><id>http://localhost:4000/hfoss/2018/02/13/my-love-hate-relationship-with-twine-and-harlowe</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/13/my-love-hate-relationship-with-twine-and-harlowe.html">&lt;p&gt;While at WiCHacks 2018 this weekend, which entails it’s own post (coming soon), my team, the Anitfreeze Bears, used &lt;a href=&quot;http://twinery.org/&quot;&gt;Twine&lt;/a&gt; to create a game. Twine is a FOSS application that generates the code for interactive stories, much like choose your own adventure games. The first Twine was created with python and javascript which generated the html, css, and javascript that make up the game. It was based on the story engine Twee. A story engine refers to the system and format used to note how the story passages link together. Twine 2 was created with mostly javascript and using the Harlowe game engine. Twine has a friendly GUI that allows for people to easily compose a story. It also includes options to export an archive of your stories and has the option to display a proofreading copy of your story that is one html page. Although this alone is enough to make great stories, you can expand the functionality through programming. There are ways to incorporate variables inside of passages to cut down on the number of passages you need to create. You can alter the display by adding your own CSS. Also you can add your own javascript to create an inventory system, like my team did, or other possibilities. Although I appreciate Twine as a powerful tool, there are also drawbacks that come with it.&lt;/p&gt;

&lt;p&gt;The first issue I take is with the documentation; don’t get me wrong they have &lt;a href=&quot;http://twinery.org/wiki/&quot;&gt;an awesome wiki&lt;/a&gt; but the website is not super clear. First off the repositories the intro paragraph point to refer to the repos for Twine 1 and 2 but are unlabeled. Also the last repo they point to is not Twine itself but Harlowe, which is what Twine 2 comes with as default. Harlowe’s documentation starts with the changelog and doesn’t really accurately explain what Harlowe does in an easy to understand manner. The most prominent documentation is changelogs, which are not as useful when you don’t understand what it is in the first place. It would benefit from a more detailed intro or a link to the story format explanation on the wiki.&lt;/p&gt;

&lt;p&gt;Regardless of the more picky documentation issues, my team and I found that Harlowe was not the most customizable. It was good for simple things like holding variables and such but not so flexible for adding something like an inventory system or other more complex elements. We probably would have benefited from a more customizable story format but more likely we would have needed to significantly alter Twine be able to add separate game mechanics more easily. It’s still a very powerful piece of software by maintaining all the complex branches and giving a friendly user interface, it just isn’t as customizable when it comes to changing game mechanics.&lt;/p&gt;</content><author><name></name></author><summary type="html">While at WiCHacks 2018 this weekend, which entails it’s own post (coming soon), my team, the Anitfreeze Bears, used Twine to create a game. Twine is a FOSS application that generates the code for interactive stories, much like choose your own adventure games. The first Twine was created with python and javascript which generated the html, css, and javascript that make up the game. It was based on the story engine Twee. A story engine refers to the system and format used to note how the story passages link together. Twine 2 was created with mostly javascript and using the Harlowe game engine. Twine has a friendly GUI that allows for people to easily compose a story. It also includes options to export an archive of your stories and has the option to display a proofreading copy of your story that is one html page. Although this alone is enough to make great stories, you can expand the functionality through programming. There are ways to incorporate variables inside of passages to cut down on the number of passages you need to create. You can alter the display by adding your own CSS. Also you can add your own javascript to create an inventory system, like my team did, or other possibilities. Although I appreciate Twine as a powerful tool, there are also drawbacks that come with it.</summary></entry><entry><title type="html">Ode to Bug Reports</title><link href="http://localhost:4000/hfoss/2018/01/24/ode-to-bug-reports.html" rel="alternate" type="text/html" title="Ode to Bug Reports" /><published>2018-01-24T11:04:54-05:00</published><updated>2018-01-24T11:04:54-05:00</updated><id>http://localhost:4000/hfoss/2018/01/24/ode-to-bug-reports</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/01/24/ode-to-bug-reports.html">&lt;p&gt;The article “How to Report Bugs Effectively” by Simon Tatham is truly a rubric on how to write a clear and detailed bug report. He addresses the many issues that developers and tech support workers experience. He explains how it is necessary to include details of what exactly went wrong including error messages, what the program looks like during various stages, and the exact steps you took to get to the point of failure. He also touches on the struggles of bug reports in the FOSS world where more often than not the only form of communication is through only text. You cannot directly show the developer what went wrong, so a clearly written bug report is necessary and preferably has screen shots. He also talks about making sure the bug is reproducible as well as making sure the programmer can reproduce the bug themselves.&lt;/p&gt;

&lt;p&gt;I found that the article was mostly aimed at users as apposed to developers. It’s more of a plea from developers to users to help us help them. The language is relatively accessible for those who have some experience with computers. That being said I still think it’s a useful reminder to developers when they are using other people’s programs. There is even a section to address this. I’ve found the article very useful as I have already sent it to some of my family members who often look to me as free tech support, in the hopes of getting clearer bug reports from them in the future. This however does bring up the point that there is no guarantee that users will actually read this even if you specifically ask them to read it before submitting a bug report. However, this doesn’t take away that this is a useful resource.&lt;/p&gt;</content><author><name></name></author><summary type="html">The article “How to Report Bugs Effectively” by Simon Tatham is truly a rubric on how to write a clear and detailed bug report. He addresses the many issues that developers and tech support workers experience. He explains how it is necessary to include details of what exactly went wrong including error messages, what the program looks like during various stages, and the exact steps you took to get to the point of failure. He also touches on the struggles of bug reports in the FOSS world where more often than not the only form of communication is through only text. You cannot directly show the developer what went wrong, so a clearly written bug report is necessary and preferably has screen shots. He also talks about making sure the bug is reproducible as well as making sure the programmer can reproduce the bug themselves.</summary></entry><entry><title type="html">Let’s Talk About Text…. books</title><link href="http://localhost:4000/hfoss/2018/01/24/lets-talk-about-text-books.html" rel="alternate" type="text/html" title="Let's Talk About Text.... books" /><published>2018-01-24T11:04:54-05:00</published><updated>2018-01-24T11:04:54-05:00</updated><id>http://localhost:4000/hfoss/2018/01/24/lets-talk-about-text-books</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/01/24/lets-talk-about-text-books.html">&lt;p&gt;This semester I’m taking College Physics II. Interestingly the textbook is not required, though highly suggested, and an alternative free and open source textbook was offered. This book is the &lt;a href=&quot;https://cnx.org/contents/Ax2o07Ul@9.98:HR_VN3f7@3/Introduction-to-Science-and-th&quot;&gt;College Physics textbook from OpenStax&lt;/a&gt;. Sometimes I have trouble paying attention in class when the topic we are on is boring, so I figured I would try to read ahead so I could do questions or half pay attention in class. Although I already had the proprietary book for the class (Physics 5th Edition by James S. Walker) from the previous class in the sequence, College Physics I, I decided to give the open source book a try.&lt;/p&gt;

&lt;p&gt;I usually don’t read technical textbooks, they tend to be very thick and hard to understand. I was pleasantly surprised by the quality of the textbook. I didn’t expect it to be as great as it was. The explanations are helpful and succinct, which helps me to actually get through the reading. They also include pictures and examples, just as other textbooks. I didn’t really read much of the Walker’s textbook but for skimming through it I can tell there are more detailed examples then the OpenStax books. Walker’s book also includes videos of experiments should you buy the ebook version as I have. Interestingly, the OpenStax textbook also includes copies of PhET simulations. &lt;a href=&quot;https://phet.colorado.edu/en/about&quot;&gt;PhET simulations&lt;/a&gt; are little science simulations you can run on your computer. It is run by University of Colorado Boulder and they make the simulations &lt;a href=&quot;https://phet.colorado.edu/en/about/source-code&quot;&gt;free and open source&lt;/a&gt;. They are very helpful for understanding certain relationships within physics. Also they’re fun and keep students engaged. PhET simulations and the OpenStax textbook are good examples of Open Education Resources (OERs). I find that the textbooks wind up being approximately equivalent even though the examples aren’t as great as Walker’s, because most of the examples I use come from homework and classwork or the professor’s slides. The OpenStax textbook is much more accessible to me, I don’t have to login or deal with Pearson’s systems (that have seriously sub-par security, but that’s another post).&lt;/p&gt;

&lt;p&gt;Personal preferences aside, what are the benefits and drawbacks of open textbooks and other OERs? There’s the obvious benefit to students where their wallet doesn’t cry so much. For reference, Walker is almost $200 (ow) and it’s estimated that US students spend $1,200 to $1,300 a year on textbooks (owww). As mentioned in a &lt;a href=&quot;https://www.nytimes.com/2015/02/26/your-money/putting-a-dent-in-college-costs-with-open-source-textbooks.html&quot;&gt;New Yorker article&lt;/a&gt; referring to research on the subject of OERs, a side effect of a free textbook means that students will not put off obtaining the textbook and fall behind. They are more likely to actually use the textbook instead of trying to manage without one because it’s too expensive to buy. &lt;a href=&quot;https://link.springer.com/article/10.1007/s11423-016-9434-9&quot;&gt;A study&lt;/a&gt; summarized in &lt;a href=&quot;https://www.youtube.com/watch?v=SX0K0hb_xKE&quot;&gt;a video&lt;/a&gt; in &lt;a href=&quot;https://oer.psu.edu/benefits-of-using-oer/&quot;&gt;an article by Penn State on OER’s&lt;/a&gt; suggested that the easy access to the textbook could result in higher grades in students and a lower dropout rate. They also mention that most instructors believe that open textbooks and OERs are as good or better than proprietary resources.&lt;/p&gt;

&lt;p&gt;Then there is the open source aspect where the OERs are adjustable due to their nature, where professors can adjust the textbooks to their needs. They can re-order, add, or remove content as they need, then easily re-distribute to their students. Any mistakes can be quickly updated. Taking the College Physics OpenStax textbook as an example, it’s very easy to open an account, as a student or teacher, and suggest changes to the book. This means that mistakes that are caught can be easily reported and remedied. This modular nature also means that the textbook can very easily be kept up to date.&lt;/p&gt;

&lt;p&gt;I personally don’t see many drawbacks to OERs. There is the issue that perhaps the content is not as high quality as one that has someone paid to make the textbook and has set aside a considerable time to do so. Someone making the textbook for free may not have as much time to dedicate to it. This is balanced out by the fact that many instructors can collaborate on a textbook and that there are organizations that facilitate the creation of OERs such as OpenStax and PhET. Some of the issues are with the software that is included with many of these textbooks. In large intro classes an online homework system is necessary and often a proprietary system is used so that the school doesn’t have to deal with managing all that goes into such a system. I propose that open source software can found or created for these purposes. It would likely be a more secure and higher quality system than most proprietary systems (&lt;em&gt;cough&lt;/em&gt; PEARSON &lt;em&gt;cough&lt;/em&gt;). Even if the school feels they cannot handle such a system on their own, they could potentially just require the students access the homework management software and not the textbook reducing the cost to the students.&lt;/p&gt;

&lt;p&gt;Adoption of open textbooks and OERs has been increasing in recent years. From personal experience, it’s easy to include in technical courses such as science and math courses because they are more about concepts than specific memorization. It doesn’t matter how I learn how density works, just that I learn it correctly. Things get a little more difficult with liberal arts courses where there is a specific reading with specific information that we need to discuss in class. A lot of liberal arts classes I have taken have attempted to use more free online readings when possible to try to reduce the amount of textbooks students have to pay for.&lt;/p&gt;

&lt;p&gt;Going forward I will attempt to use and encourage professors to use open textbooks and OERs. I’m inspired to attempt to contribute to some of these OERs online, especially those in my field of programming. I believe that knowledge should always be free and OERs are some of the best ways to do it.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Are in order of appearance:&lt;/p&gt;

&lt;p&gt;https://cnx.org/contents/Ax2o07Ul@9.98:HR_VN3f7@3/Introduction-to-Science-and-th&lt;/p&gt;

&lt;p&gt;https://oer.psu.edu/benefits-of-using-oer/&lt;/p&gt;

&lt;p&gt;https://link.springer.com/article/10.1007/s11423-016-9434-9&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/watch?v=SX0K0hb_xKE&lt;/p&gt;

&lt;p&gt;https://www.nytimes.com/2015/02/26/your-money/putting-a-dent-in-college-costs-with-open-source-textbooks.html&lt;/p&gt;

&lt;p&gt;https://www.teachthought.com/technology/5-sources-of-open-source-textbooks/&lt;/p&gt;</content><author><name></name></author><summary type="html">This semester I’m taking College Physics II. Interestingly the textbook is not required, though highly suggested, and an alternative free and open source textbook was offered. This book is the College Physics textbook from OpenStax. Sometimes I have trouble paying attention in class when the topic we are on is boring, so I figured I would try to read ahead so I could do questions or half pay attention in class. Although I already had the proprietary book for the class (Physics 5th Edition by James S. Walker) from the previous class in the sequence, College Physics I, I decided to give the open source book a try.</summary></entry></feed>