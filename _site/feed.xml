<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-04-12T00:03:55-04:00</updated><id>http://localhost:4000/</id><title type="html">Genie on FOSS</title><subtitle>Regina's blog for HFOSS class.</subtitle><entry><title type="html">GIMP and Inkscape: A Love Hate Relationship</title><link href="http://localhost:4000/hfoss/2018/04/11/gimp-and-inkscape.html" rel="alternate" type="text/html" title="GIMP and Inkscape: A Love Hate Relationship" /><published>2018-04-11T01:00:00-04:00</published><updated>2018-04-11T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/04/11/gimp-and-inkscape</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/04/11/gimp-and-inkscape.html">&lt;p&gt;As obvious by the title, I have a love hate relationship with both &lt;a href=&quot;https://www.gimp.org/&quot;&gt;GIMP&lt;/a&gt; and &lt;a href=&quot;https://inkscape.org/en/&quot;&gt;Inkscape&lt;/a&gt;. For the uninitiated, GIMP is an open source image editing program. GIMP is most similar to the proprietary industry standard of Adobe Photoshop. Inkscape is a vector graphics program that is similar in function to the proprietary industry standard Adobe Illustrator. I have a lot of experience with both as I used them to do design work for &lt;a href=&quot;https://github.com/RITlug/TigerOS&quot;&gt;TigerOS&lt;/a&gt;, an open source remix of Fedora aimed specifically at getting RIT students into Linux. I was able to use Inkscape to create the TigorOS mascot and used GIMP to make the wallpapers. Although I appreciated being able to do design work using open source software, especially not having to pay for Adobe with both my arms and my legs, I always struggle with it. I know that it takes time to learn design software because it tends to be quite complex but I find both GIMP and Inkscape have quite a learning curve. The options bars along the side are a bit cryptic and it can be difficult to find things like layers at first. I know that both communities are making an effort to increase their user experience. Regardless, they both are valuable resources and are good open source solutions.&lt;/p&gt;</content><author><name></name></author><summary type="html">As obvious by the title, I have a love hate relationship with both GIMP and Inkscape. For the uninitiated, GIMP is an open source image editing program. GIMP is most similar to the proprietary industry standard of Adobe Photoshop. Inkscape is a vector graphics program that is similar in function to the proprietary industry standard Adobe Illustrator. I have a lot of experience with both as I used them to do design work for TigerOS, an open source remix of Fedora aimed specifically at getting RIT students into Linux. I was able to use Inkscape to create the TigorOS mascot and used GIMP to make the wallpapers. Although I appreciated being able to do design work using open source software, especially not having to pay for Adobe with both my arms and my legs, I always struggle with it. I know that it takes time to learn design software because it tends to be quite complex but I find both GIMP and Inkscape have quite a learning curve. The options bars along the side are a bit cryptic and it can be difficult to find things like layers at first. I know that both communities are making an effort to increase their user experience. Regardless, they both are valuable resources and are good open source solutions.</summary></entry><entry><title type="html">My Manservant Mycroft</title><link href="http://localhost:4000/hfoss/2018/04/02/my-manservant-mycroft.html" rel="alternate" type="text/html" title="My Manservant Mycroft" /><published>2018-04-02T01:00:00-04:00</published><updated>2018-04-02T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/04/02/my-manservant-mycroft</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/04/02/my-manservant-mycroft.html">&lt;p&gt;Recently I’ve been interested in various AIs and virtual assistants. This is partially because of working on the &lt;a href=&quot;https://github.com/Women-in-Computing-at-RIT/Magic-Mirror&quot;&gt;Magic Mirror project&lt;/a&gt; as Women in Computing at RIT’s Projects Committee Head. At one point we were looking at various open source voice assistant/AIs to use. One of the main assistants we were looking at was &lt;a href=&quot;https://mycroft.ai/&quot;&gt;Mycroft&lt;/a&gt;. Mycroft is an open source AI licensed under Apache 2.0 and it is available on &lt;a href=&quot;https://github.com/MycroftAI/mycroft-core&quot;&gt;GitHub&lt;/a&gt;. Mycroft is available on &lt;a href=&quot;https://mycroft.ai/get-mycroft/&quot;&gt;several platforms&lt;/a&gt; including their device the Mycroft Mark I, with their next version the Mark II currently in crowd funding and slated to be out December 2018. These devices serve as a direct competitor to proprietary assistants like Google Home and Amazon’s Alexa. Mycroft is not only an open source alternative to these devices but also serves as a platform that is much more privacy conscious. The best part about Mycroft is that is can be downloaded to run on a Raspberry Pi 3 so people can customize their hardware setup easily. Someone can get a better speaker or microphone for their setup. It can also be installed on most Linux desktop distros, much like having an assistant on other operating systems (I hope to install it on my desktop for fun when I get the time). It is also possible to get it onto Android if you are willing to go through android studio to hack it into an apk runnable.&lt;/p&gt;

&lt;p&gt;Mycroft seems to be the most viable open source competitor to proprietary assistants, their successful kickstarter for their Mark I and currently successful campaign for their Mark II proving that. Full disclaimer, I have backed their Mycroft II Indiegogo campaign. They are one of the few open source AIs I’ve seen attempting to make a physical box aimed to eventually be able to be an out of the box experience, designed for those who have little to no technical skills. It’s worth noting that Mycroft is backed up by an actual company that decided to make their code open source. I’m very interested in this project and will continue to follow it as it grows, I encourage you to check it out for yourself.&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently I’ve been interested in various AIs and virtual assistants. This is partially because of working on the Magic Mirror project as Women in Computing at RIT’s Projects Committee Head. At one point we were looking at various open source voice assistant/AIs to use. One of the main assistants we were looking at was Mycroft. Mycroft is an open source AI licensed under Apache 2.0 and it is available on GitHub. Mycroft is available on several platforms including their device the Mycroft Mark I, with their next version the Mark II currently in crowd funding and slated to be out December 2018. These devices serve as a direct competitor to proprietary assistants like Google Home and Amazon’s Alexa. Mycroft is not only an open source alternative to these devices but also serves as a platform that is much more privacy conscious. The best part about Mycroft is that is can be downloaded to run on a Raspberry Pi 3 so people can customize their hardware setup easily. Someone can get a better speaker or microphone for their setup. It can also be installed on most Linux desktop distros, much like having an assistant on other operating systems (I hope to install it on my desktop for fun when I get the time). It is also possible to get it onto Android if you are willing to go through android studio to hack it into an apk runnable.</summary></entry><entry><title type="html">Open RPGs: Changing the FATE of Gaming</title><link href="http://localhost:4000/hfoss/2018/03/27/open-games.html" rel="alternate" type="text/html" title="Open RPGs: Changing the FATE of Gaming" /><published>2018-03-27T01:00:00-04:00</published><updated>2018-03-27T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/03/27/open-games</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/27/open-games.html">&lt;p&gt;Like many college freshman I joined a lot of clubs when I got to RIT. One of those was RWAG which stands for RIT Wargaming Association and Guild. The name isn’t super descriptive but it’s essentially the boardgaming club on campus. Now when we’re talking about boardgames we’re talking about things much more entertaining than monopoly. More on the side of Catan or Risk. This also includes tabletop rpgs like Dungeons and Dragons. A lot of people have reservations about D&amp;amp;D thinking it’s only for stereotypical nerds or is something that is just made for TV nerds. In reality is much like cops and robbers for adults or structured improv. What many people don’t realize is that there is a world beyond D&amp;amp;D that have vastly different rules. Some games will publish their core mechanics in an open source SRD or System Reference Document. Unfortunately, sometimes this document is not super informative as the controversial 4th Edition D&amp;amp;D SRD which did not provide enough information to understand the game. At this time they also transitioned from an Open Game License (OGL) to a proprietary license. This partially contributed to the split from many people from 4th Edition to other similar systems such as Pathfinder, which is still today licensed under OGL.&lt;/p&gt;

&lt;p&gt;The advantage to an OGL license allows for many people to be able to create their own content for the game, or homebrew content, and be able to share it with the world. There tends to be a limitation with this that branding cannot be used and you cannot sell official content for the game without permission. There are a surprising amount of games that are licensed under OGL. A particularly awesome game used by many is &lt;a href=&quot;https://www.evilhat.com/home/fate-core/&quot;&gt;FATE Core&lt;/a&gt; and &lt;a href=&quot;https://www.evilhat.com/home/fae/&quot;&gt;FATE: Accelerated&lt;/a&gt;. They are both &lt;a href=&quot;https://www.evilhat.com/home/fate-core-downloads/&quot;&gt;available for download&lt;/a&gt; for free and they host &lt;a href=&quot;https://fate-srd.com/&quot;&gt;the SRD online&lt;/a&gt;, in line with their OGL license. It is a universal rpg system, which means it is not tied to a particular setting. You can use it to play anything from swashbuckling space pirates to havoc wrecking goblins. It is a very popular system for building you’re own world and want to focus on story. Also it’s worth it to note that Wizards of the Coast learned their lesson from D&amp;amp;D 4e and has released 5e under the OGL with a &lt;a href=&quot;http://dnd.wizards.com/articles/features/systems-reference-document-srd&quot;&gt;complete SRD&lt;/a&gt;. I believe this attests to the quality that games with OGL can have as well as the community demand for using the license.&lt;/p&gt;</content><author><name></name></author><summary type="html">Like many college freshman I joined a lot of clubs when I got to RIT. One of those was RWAG which stands for RIT Wargaming Association and Guild. The name isn’t super descriptive but it’s essentially the boardgaming club on campus. Now when we’re talking about boardgames we’re talking about things much more entertaining than monopoly. More on the side of Catan or Risk. This also includes tabletop rpgs like Dungeons and Dragons. A lot of people have reservations about D&amp;amp;D thinking it’s only for stereotypical nerds or is something that is just made for TV nerds. In reality is much like cops and robbers for adults or structured improv. What many people don’t realize is that there is a world beyond D&amp;amp;D that have vastly different rules. Some games will publish their core mechanics in an open source SRD or System Reference Document. Unfortunately, sometimes this document is not super informative as the controversial 4th Edition D&amp;amp;D SRD which did not provide enough information to understand the game. At this time they also transitioned from an Open Game License (OGL) to a proprietary license. This partially contributed to the split from many people from 4th Edition to other similar systems such as Pathfinder, which is still today licensed under OGL.</summary></entry><entry><title type="html">HFOSS Commarch Project: Jekyll</title><link href="http://localhost:4000/hfoss/2018/03/27/commarch.html" rel="alternate" type="text/html" title="HFOSS Commarch Project: Jekyll" /><published>2018-03-27T01:00:00-04:00</published><updated>2018-03-27T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/03/27/commarch</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/27/commarch.html">&lt;p&gt;In HFOSS class we had our Commarch project. This was a group project where we anaylized an open source project’s git repository. My team decided to do Jekyll. Our proposal can be found &lt;a href=&quot;https://github.com/axk4545/hfoss-commarch/blob/master/teamproposal.md&quot;&gt;on our GitHub repository&lt;/a&gt;. You can also find the &lt;a href=&quot;https://github.com/axk4545/hfoss-commarch/blob/master/report.md&quot;&gt;full report&lt;/a&gt; and &lt;a href=&quot;https://github.com/axk4545/hfoss-commarch/tree/master/presentation&quot;&gt;the source&lt;/a&gt; for our &lt;a href=&quot;https://gen1e.github.io/commarch/&quot;&gt;presentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We used &lt;a href=&quot;https://github.com/tomheon/git_by_a_bus/tree/v2&quot;&gt;git by a bus v2&lt;/a&gt; to get data and &lt;a href=&quot;https://github.com/liam-middlebrook/git_by_a_lion&quot;&gt;git by a lion&lt;/a&gt; to process that output. We also calculated the &lt;a href=&quot;https://github.com/ritjoe/hfoss/blob/master/assets/tomspotcallaway-howtotellifyourfossprojectisdoomedtofail.pdf&quot;&gt;Callaway Coefficient of Fail&lt;/a&gt; that is also in &lt;a href=&quot;https://github.com/axk4545/hfoss-commarch&quot;&gt;our repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found the project to be very interesting and really helped me to connect a lot of the conepts we talked about when reading Eghbal’s “Roads and Bridges” to a real world project.&lt;/p&gt;</content><author><name></name></author><summary type="html">In HFOSS class we had our Commarch project. This was a group project where we anaylized an open source project’s git repository. My team decided to do Jekyll. Our proposal can be found on our GitHub repository. You can also find the full report and the source for our presentation.</summary></entry><entry><title type="html">The Average Person: A Patron of the Arts and Sciences</title><link href="http://localhost:4000/hfoss/2018/03/20/patronage.html" rel="alternate" type="text/html" title="The Average Person: A Patron of the Arts and Sciences" /><published>2018-03-20T01:00:00-04:00</published><updated>2018-03-20T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/03/20/patronage</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/20/patronage.html">&lt;p&gt;I mentioned briefly in my &lt;a href=&quot;https://gen1e.github.io/hfoss/2018/03/20/litreview3.html&quot;&gt;litreview 3&lt;/a&gt; post that I’m a fan of crowdfunding. I find it fascinating. For many years the main patrons of the arts were the rich and powerful. This was also similar for sciences where scientists had patrons to support their work. As time went on other methods of supporting the arts developed and the same for sciences. Crowdfunding I see as coming full circle to original idea of patronage, but instead of the rich and powerful it’s usually the middle class or the common person. There are a few different kinds of crowdfunding. The smallest kind tends to be more of a tip jar, where a patron gives someone enough to buy a cup of coffee. This tends to be for people who produce content on a more casual basis, and often have a day job. For bigger creators there are platforms like Patreon where someone can pledge a monthly amount. The subscription can sometimes give you access to different levels of extra content depending on the level of subscription payment. There are also platforms like Kickstarter and Indiegogo, where someone creates a campaign with a certain monetary goal to achieve a certain produced output.&lt;/p&gt;

&lt;p&gt;I personally have seen a lot of great things come out of crowdfunding. A lot of cool indie boardgames come out of kickstarters. There are great creators that can be supported to create full time for the most part. This applies to FOSS in that there are some free and open source projects that can be supported through this crowdfunding. This can be open source games such as the tabletop rpg &lt;a href=&quot;http://openlegendrpg.com/&quot;&gt;Open Legend&lt;/a&gt; or it can be artists releasing under creative commons such as &lt;a href=&quot;https://www.peppercarrot.com/&quot;&gt;David Revoy with his Pepper and Carrot webcomic&lt;/a&gt;. It can also be technical projects. I personally recently backed the open source voice assistant &lt;a href=&quot;https://mycroft.ai/&quot;&gt;Mycroft&lt;/a&gt; to develop a second iteration.&lt;/p&gt;

&lt;p&gt;I have often been told that there are times where you “vote with your money,” and crowdfunding creates and environment where common people can show their support for open source projects in a manageable way.  By spending money on an open source assistant that is more privacy focused, I tell the rest of the market that I don’t want you spying me constantly. The success of these campaigns can have an impact on the market the creation is in, potentially changing various standards. I really like crowdfunding, although I realize there are some risks that come with crowdfunding, I feel the benefits often outway the risks.&lt;/p&gt;</content><author><name></name></author><summary type="html">I mentioned briefly in my litreview 3 post that I’m a fan of crowdfunding. I find it fascinating. For many years the main patrons of the arts were the rich and powerful. This was also similar for sciences where scientists had patrons to support their work. As time went on other methods of supporting the arts developed and the same for sciences. Crowdfunding I see as coming full circle to original idea of patronage, but instead of the rich and powerful it’s usually the middle class or the common person. There are a few different kinds of crowdfunding. The smallest kind tends to be more of a tip jar, where a patron gives someone enough to buy a cup of coffee. This tends to be for people who produce content on a more casual basis, and often have a day job. For bigger creators there are platforms like Patreon where someone can pledge a monthly amount. The subscription can sometimes give you access to different levels of extra content depending on the level of subscription payment. There are also platforms like Kickstarter and Indiegogo, where someone creates a campaign with a certain monetary goal to achieve a certain produced output.</summary></entry><entry><title type="html">Litreview 3: More about Digital Infrastructure</title><link href="http://localhost:4000/hfoss/2018/03/20/litreview3.html" rel="alternate" type="text/html" title="Litreview 3: More about Digital Infrastructure" /><published>2018-03-20T01:00:00-04:00</published><updated>2018-03-20T01:00:00-04:00</updated><id>http://localhost:4000/hfoss/2018/03/20/litreview3</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/20/litreview3.html">&lt;p&gt;For this litreview, we continued from p77 of &lt;a href=&quot;https://github.com/ritjoe/hfoss/blob/master/assets/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure.pdf&quot;&gt;Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal&lt;/a&gt; published on July 14, 2016, and finished reading the report. The &lt;a href=&quot;https://gen1e.github.io/hfoss/2018/03/05/litreview2.html&quot;&gt;first part of the report&lt;/a&gt; focused on the problems of our deteriorating digital infrastructure made up of open source projects and why they were having them. This second part focuses more on how some open source projects are sustaining themselves and how we can better help to support them in the future.&lt;/p&gt;

&lt;p&gt;Some open source projects are able to monetize their project in some way. This is often done when a service can be provided such as hosting the running software or by providing enterprise support. For some projects this is not feasible and some projects will resort to consulting as a way to fund themselves. Another way to fund open source projects has been to post bounties on certain issues in an effort to fund contributors for their time. As the author points out this can result in people contributing for the wrong reasons and people doing a mediocre job then dropping off the face of the earth. A revenue stream that I found very interesting was the potential for paid licenses.&lt;/p&gt;

&lt;p&gt;The general idea behind paid licenses is something in between a proprietary license and an open license. The biggest example of this kind of license is the &lt;a href=&quot;https://fair.io/&quot;&gt;Fair Source&lt;/a&gt; license, as mentioned in the report. This license allows free use and access to the source code up to a certain number of users; making it free and viewable source for personal and small business use but allows the creators to charge for large business use. The report mentions this as a way for a project to pay for itself but the author brings up that this is controversial. This license goes against the idea of open source by limiting the freedom to a certain point. It’s also not feasible for library or plugin projects. Although I don’t see this as helpful to open source projects as it is against it’s philosophy, I see this as a great way to have our code to be more open overall. We will always be in a world where proprietary software will exist  (though I will gladly eat my words should that change). I see the Fair Source license as a way to get companies that would usually keep all of their code closed source to pick this license instead. It’s more of “something is better than nothing” kind of situation, where we can attempt to get companies who would consider open sourcing their software to use a fair source license to keep at least part of it free, but also re-assure them that they will be able to make money.&lt;/p&gt;

&lt;p&gt;The author also mentions crowdfunding as a way to fund open source projects. Django is mentioned as a project that was able to successfully launch a kickstarter campaign to fund some database work. Crowdfunding campaigns are an interesting recent phenomenon. Essentially, someone creates content that explains what they would like to achieve and what you would get should you give money upfront to back the project. Supporting a project is no guarantee for it’s completion nor that if it fails you will get your money back. However, there have been many successful campaigns. I find crowdfunding interesting because it is a way for the common person to be a patron of the arts or an investor. You don’t have to be rich to fund a campaign. This is also part of the problem as these campaigns are generally aimed at middle class to low upper class people. There have been companies to back crowdfunding campaigns but it’s rare. I think though that this is a good option for medium sized projects to help get some stretches of work done.&lt;/p&gt;

&lt;p&gt;There are other methods for funding open source projects such as companies sponsoring someone or putting one of their salaried employees on an open source project, usually one of the maintainers. There has been an increase in companies encouraging some of their employees on company time. I think that this is an effective way of combating the issue of  having one maintainer and not having enough human resources. The author also mentioned foundations. I was specifically interested in the grants given out by the Mozilla foundation and Linux Foundation, who were both gathering funds to attempt to support infrastructure projects. I also think this is great as there are organizations that can research and attempt to figure out what is needed where the most and are large and notable, making it more likely for them to get funding from companies. Another method I found very interesting is through academic institutions. Research at universities can both start and support existing open source projects. This can help support the system by adding contributors and potentially supporting maintainers who teach or if the project can contribute to research. RIT’s open source community and FOSS minor are great instances of that. Our class, Humanitarian Free and Open Source Software, is a great way to get people introduced to open source software and encourage them to contribute. There is also a FOSS projects class where there are students working on, you guessed it, open source projects. By introducing open source to the curriculum they can increase the amount of contributors to open source.&lt;/p&gt;

&lt;p&gt;The author also discusses how to help open source projects going forward. The main issues that were pointed out were raising awareness of the lack of support for our open source digital infrastructure, working with projects for improvement, and expanding the pool of contributors. I agree with the author’s assessment and believe that further campaigning to get companies involved and people aware of this problem. Overall, I feel this report is well written, especially for those who are not developers and is a good resource for those trying to raise awareness for this issue.&lt;/p&gt;</content><author><name></name></author><summary type="html">For this litreview, we continued from p77 of Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal published on July 14, 2016, and finished reading the report. The first part of the report focused on the problems of our deteriorating digital infrastructure made up of open source projects and why they were having them. This second part focuses more on how some open source projects are sustaining themselves and how we can better help to support them in the future.</summary></entry><entry><title type="html">Quiz1</title><link href="http://localhost:4000/hfoss/2018/03/07/quiz1.html" rel="alternate" type="text/html" title="Quiz1" /><published>2018-03-07T09:00:00-05:00</published><updated>2018-03-07T09:00:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/07/quiz1</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/07/quiz1.html">&lt;p&gt;1) Expanding each acronym&lt;/p&gt;

&lt;p&gt;1.1) IRC: Internet Relay Chat&lt;/p&gt;

&lt;p&gt;1.2) FOSS: Free and Open Source Software&lt;/p&gt;

&lt;p&gt;1.3) OLPC: One Laptop Per Child&lt;/p&gt;

&lt;p&gt;1.4) PR: Pull Request&lt;/p&gt;

&lt;p&gt;Bonus: GNU: GNU’s Not Unix&lt;/p&gt;

&lt;p&gt;2) What is the name of the visrion control system we use in this course?
git&lt;/p&gt;

&lt;p&gt;Bonus: SVN: Subversion&lt;/p&gt;

&lt;p&gt;3) Please give the one work name for the interface used in the OLPC computers &amp;amp; our VMs:
Sugar&lt;/p&gt;

&lt;p&gt;4) Bonus: What is the short, two-letter name for the OLPC computers used in the final project for this class?
XO&lt;/p&gt;

&lt;p&gt;5)We refer to sites that host source code as “forges.” What is the name for the primary forge used in this course?
GitHub&lt;/p&gt;

&lt;p&gt;6) Bonus: name the other forge we have used:
GitLabs&lt;/p&gt;

&lt;p&gt;7) Bonus: name another forge, one we have not used in this course.
BitBucket&lt;/p&gt;

&lt;h2 id=&quot;multiple-choice&quot;&gt;Multiple Choice&lt;/h2&gt;
&lt;p&gt;8) The GitHub-specific term to describe the process in which, starting from one repository hosted at GitHub, one creates another repository, also hosted at GitHub, but under the control of a different user account.&lt;/p&gt;

&lt;p&gt;d) fork&lt;/p&gt;

&lt;p&gt;9) A collection of related commit objects&lt;/p&gt;

&lt;p&gt;a) repository&lt;/p&gt;

&lt;p&gt;10) A separate, but related, repository from which one may fetch or pull changes into one’s own working copy, and to which in some instances one might have permission to push changes from one’s own working copy.&lt;/p&gt;

&lt;p&gt;c) remote&lt;/p&gt;

&lt;p&gt;11) The general term in git for making an exact, working copy of another repository in which changes can be tracked separately between the two versions.&lt;/p&gt;

&lt;p&gt;e) clone&lt;/p&gt;

&lt;p&gt;12) A namespace in which one can track changes to a set of files within a given repository. This term applies both to the action and to the result of the action. Comparisons (‘diffs’ or patches) can be made between different such namespaces.&lt;/p&gt;

&lt;p&gt;b) branch&lt;/p&gt;

&lt;p&gt;13) Consider the following (+1 for each correct, -1 for each incorrect):&lt;/p&gt;

&lt;p&gt;a) e59b627&lt;/p&gt;

&lt;p&gt;&lt;del&gt;b) 451.867&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;c) cf153fb32&lt;/p&gt;

&lt;p&gt;&lt;del&gt;d) dca_079&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;e) 9539807&lt;/p&gt;

&lt;p&gt;&lt;del&gt;f) DB6A60A&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;g) 614@1d4&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;h) be34fb47c60d&lt;/p&gt;

&lt;p&gt;Looking just at the string of non-space characters to the right of the close-parenthesis …&lt;/p&gt;

&lt;p&gt;List which of these could be a valid commit identifier?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a&lt;/li&gt;
  &lt;li&gt;c&lt;/li&gt;
  &lt;li&gt;e&lt;/li&gt;
  &lt;li&gt;h&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;14) We’ve discussed “the four R’s” as a shorthand for the freedoms attached to software for it to be considered “free” or “open source”. List or describe each. (eg, if you can remember the “r” word you can just give that. If you cannot remember the term, but can describe the freedom involved, that also counts). Various “r” words are roughly synonymous for some of the freedoms, but we’re counting freedoms here, not synonyms so if you give two (or more) terms for the same freedom, it only counts once. For the purposes of this quiz, “remix” does not count as describing any of them. (1pt each)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10.1) Run

10.2) Read (the source)

10.3) Adapt to your liking, being able to change the software to fit your needs.

10.4) Redistribute
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">1) Expanding each acronym</summary></entry><entry><title type="html">The Magic of Markdown</title><link href="http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown.html" rel="alternate" type="text/html" title="The Magic of Markdown" /><published>2018-03-06T00:00:00-05:00</published><updated>2018-03-06T00:00:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/06/the-magic-of-markdown.html">&lt;p&gt;So if you haven’t noticed so far in this blog, I’m a bit of a nerd. I really like playing tabletop RPGs, and I’m particularly fond of D&amp;amp;D 5e. I’m currently DMing a campaign for some of my friends (9 of them in fact, and yes I’m a badass DM for taking on that big of a group). Now I don’t always plan for my sessions (sometimes I use previous notes) but when I do I use markdown.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/i-dont-always-dnd.jpg&quot; alt=&quot;I don't always plan for my D&amp;amp;D sessions but when I do, I do it in Markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This isn’t the only thing I use markdown for, I also use it for other things. I usually use it for notes, task lists (before I started mainly using trello), and I’m using it right now for blog posts. But what is markdown? Well it’s a very simple markup language used by many as a “simpler” html. Markdown is a way to easily wrote down significant amounts of text and then convert that text directly to html. It has syntax to simplify certain html tags but also supports having html directly in the document. It was &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;originally created by John Gruber&lt;/a&gt; but has been adapted by various people and communities into different &lt;a href=&quot;https://github.com/commonmark/CommonMark/wiki/Markdown-Flavors&quot;&gt;flavors&lt;/a&gt;. As you can see by the list of some of the flavors, there are quite a few of them. Although the basics tend to be the same they all add different capabilities to markdown. Those who dislike markdown often point to this lack of standardization as a disadvantage to the language. While this is true, I find that most of the time as long as you are consistent about which flavor you use there aren’t that many problems. However, markdown is very easy to read on it’s own, even when not rendered as html in a browser. This is also why I like markdown. A big reason I use markdown is because it is based in plain text and simple to understand on it’s own it is more future proof and not necessarily reliant on one product or app for notes &lt;em&gt;cough cough&lt;/em&gt; Microsoft Word &lt;em&gt;cough cough&lt;/em&gt;. It also doesn’t require the use of proprietary software which is nice.&lt;/p&gt;

&lt;p&gt;Speaking of tools, there are many FOSS editors you can use with markdown. You can use any plain text editor but I prefer the ones with syntax highlighting for markdown and those that provide a preview mode to show what it will look like when rendered in a browser as html. On my local computer I usually use &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; with the markdown plugin &lt;a href=&quot;https://github.com/atom-community/markdown-preview-plus&quot;&gt;Markdown Preview Plus (MPP)&lt;/a&gt;. I really like Atom, particularly it’s dark theme is really nice. 
&lt;img src=&quot;/assets/atom.png&quot; alt=&quot;Atom editor with preview package open&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use google drive a lot (RIT students get unlimited storage) so when I’m working on lab computers and want to remember to save my notes, I use StackEdit to make sure it’s in the drive. &lt;a href=&quot;https://stackedit.io/&quot;&gt;StackEdit&lt;/a&gt; is an open source browser editor. It supports markdown and links directly into google drive. It also provides a markdown preview mode which is nice.&lt;/p&gt;

&lt;p&gt;There is a useful tool called &lt;a href=&quot;https://pandoc.org/&quot;&gt;pandoc&lt;/a&gt; which converts one kind of document to another. It supports a number of document types including markdown. It can be used to convert markdown to html or pdf or a multitude of formats. You can write a book in markdown and configure pandoc to convert it into various ebook/pdf formats.&lt;/p&gt;

&lt;p&gt;There are different markup languages that are similar to markdown, though I only really heard of these, I haven’t really used them. The closest one is probably &lt;a href=&quot;https://en.wikipedia.org/wiki/ReStructuredText&quot;&gt;reStructuredText&lt;/a&gt;, though &lt;a href=&quot;https://github.com/mundimark/awesome-markdown-alternatives&quot;&gt;there exists a list of alternatives&lt;/a&gt; that are close to markdown.&lt;/p&gt;

&lt;p&gt;Personally I love markdown and will continue to happily use it for various notes and writings.&lt;/p&gt;</content><author><name></name></author><summary type="html">So if you haven’t noticed so far in this blog, I’m a bit of a nerd. I really like playing tabletop RPGs, and I’m particularly fond of D&amp;amp;D 5e. I’m currently DMing a campaign for some of my friends (9 of them in fact, and yes I’m a badass DM for taking on that big of a group). Now I don’t always plan for my sessions (sometimes I use previous notes) but when I do I use markdown.</summary></entry><entry><title type="html">Litreview 2: NPM’s Epic Bug and Why Digital Infrastructure is Crumbling</title><link href="http://localhost:4000/hfoss/2018/03/05/litreview2.html" rel="alternate" type="text/html" title="Litreview 2:  NPM's Epic Bug and Why Digital Infrastructure is Crumbling" /><published>2018-03-05T00:59:00-05:00</published><updated>2018-03-05T00:59:00-05:00</updated><id>http://localhost:4000/hfoss/2018/03/05/litreview2</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/03/05/litreview2.html">&lt;h2 id=&quot;npm-bug&quot;&gt;NPM Bug&lt;/h2&gt;
&lt;p&gt;Our first reading was about a problematic &lt;a href=&quot;https://github.com/npm/npm/issues/19883&quot;&gt;NPM bug&lt;/a&gt; where Linux file permissions were being altered, that was written as an issue by the GitHub user Crunkle on February 22, 2018. The best way to describe the seriousness of the bug was the description that “People experiencing this bug will likely have to fully reinstall their system due to this update.” Yeah that’s a pretty big problem. Other than the bug itself, there was a lot of backlash in the comments of this issue because NPM made the 5.7.0 seem like a release as opposed to a pre-release which meant some users got confused and put this very broken code on production systems, which would then crash because of the issues. This set off a bit of a war in the comments. There were people calling each other incompetent because of their production upgrading procedures. Then there were people being very upset at and sometimes rude to the NPM devs for allowing such a big bug to be allowed in and making 5.7.0 look like a release. It got bad enough that the main collaborators locked the issue thread to collaborators. The issue was eventually fixed and 5.7.1 was released and 5.7.0 taken down.&lt;/p&gt;

&lt;p&gt;There are some things to be learned from this situation. It seems like the NPM developers need to be more clear about communicating which updates are releases and what is a pre-release. It seems their communication needs to be improved. Though it also seems to be that people got a little too overzealous and contributed more fuel to the fire instead of helping to resolve the situation. The NPM team seems to have handled this the best they could at the time. It’s hard to handle large amounts of backlash and according to the timestamps they handled the matter relatively quickly.&lt;/p&gt;

&lt;h2 id=&quot;why-digital-infrastructure-is-crumbling-and-foss-is-struggling&quot;&gt;Why Digital Infrastructure is Crumbling and FOSS is Struggling&lt;/h2&gt;
&lt;p&gt;Our second reading was &lt;a href=&quot;https://github.com/ritjoe/hfoss/blob/master/assets/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure.pdf&quot;&gt;Roads and Bridges: The Unseen Labor Behind Our Digital Infrastructure by Nadia Eghbal&lt;/a&gt; published on July 14, 2016, from the beginning up to page 77. This is a fascinating read. The author’s main point is that most of the software we know today is built upon open source software. Everything involves software now from out computers and smart-phones to doing regular tasks such as buying things online, paying bills, or going to the doctor. Every business has some sort of tech infrastructure. The overwhelming majority of this software uses something that is open source. Eghbal emphasizes the importance of FOSS as an essential part of our digital infrastructure. She also described the practical aspects of FOSS. Because the software is free developers are able to build applications faster and for a fraction of the cost when proprietary software was dominant. This makes is easier to for startups because of the dramatically reduced cost. It is also useful for education as the tools are free to use for teaching. As such it is essential to keep those open source projects going. However these FOSS projects are often not seen often because like roads and electricity most people don’t think about who’s managing it when they are using roads to drive their car or turning on a light switch. These projects need funding and contributors to keep going. Eghbal explains how some projects are large enough to get money through companies sponsoring them and through donations. Though some projects are able to sustain themselves through enterprise support or special features they can sell. Besides money there is the problem of getting enough contributors.&lt;/p&gt;

&lt;p&gt;The author covers that in open source’s early days there were a roughly an equal amount of people contributing to open source projects as there were those using it. This made the projects sustainable. In recent years there has been a dramatic increase in users and a decrease in people able to contribute. The author also talks about “magpie developers” who want to contribute to the new shiny projects as opposed to the older projects who need help also. Eghbal also describes a problem where some people in the open source community believe that there is a decrease in people able to contributre substantial code to the project. These developers are less experienced and so can’t contribute much code and/or create more work for the other contributors. This is where I disagree a bit. Although there are definitely people who are less experienced, it’s important to realize that all of us were at that stage at some point and to be compassionate about that. The key is to make sure a project is a welcoming community and helps to encourage those new developers to hone their skills and so will contribute better and better code as time goes on. This problem can be exacerbated by people who just see themselves as users and so only demand things of the project team. This doesn’t mean that those who are trying to contribute should be valued so much less so because their skills are not coding. Projects need to invest in new developers.&lt;/p&gt;

&lt;p&gt;The other problem often has to do with depending on the one or two maintainers to be the sole administrative force of the project while doing a lot of the coding. It seems that there are quite a few projects need to have better organization. What doesn’t help is that those who start the project are often the people who just want to code not be a project manager. This can be where people who don’t code or who don’t code that much can help out with open source.&lt;/p&gt;

&lt;p&gt;Overall I really enjoyed this read about issues in FOSS and the wider effects of that although I didn’t quite agree with everything the author said.&lt;/p&gt;</content><author><name></name></author><summary type="html">NPM Bug Our first reading was about a problematic NPM bug where Linux file permissions were being altered, that was written as an issue by the GitHub user Crunkle on February 22, 2018. The best way to describe the seriousness of the bug was the description that “People experiencing this bug will likely have to fully reinstall their system due to this update.” Yeah that’s a pretty big problem. Other than the bug itself, there was a lot of backlash in the comments of this issue because NPM made the 5.7.0 seem like a release as opposed to a pre-release which meant some users got confused and put this very broken code on production systems, which would then crash because of the issues. This set off a bit of a war in the comments. There were people calling each other incompetent because of their production upgrading procedures. Then there were people being very upset at and sometimes rude to the NPM devs for allowing such a big bug to be allowed in and making 5.7.0 look like a release. It got bad enough that the main collaborators locked the issue thread to collaborators. The issue was eventually fixed and 5.7.1 was released and 5.7.0 taken down.</summary></entry><entry><title type="html">Mirror Mirror On The Wall…</title><link href="http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall.html" rel="alternate" type="text/html" title="Mirror Mirror On The Wall..." /><published>2018-02-27T00:00:01-05:00</published><updated>2018-02-27T00:00:01-05:00</updated><id>http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall</id><content type="html" xml:base="http://localhost:4000/hfoss/2018/02/27/mirror-mirror-on-the-wall.html">&lt;p&gt;I happen to be very involved with the Women in Computing organization at RIT. In particular I’m involved with Projects Committee, of which I’m the committee head. Every year the committee picks a project to do, this year we are doing a magic mirror or smart mirror. A magic mirror is a monitor usually hooked up to a raspberry pi where white text is displayed on a black background. The monitor is covered by a one way mirror, usually a piece of acrylic with one side see through and the other reflective. The white text shines through the see through side, creating the effect of a mirror surface that has useful text such as the time or the weather.&lt;/p&gt;

&lt;p&gt;Our mirror currently uses the open source &lt;a href=&quot;https://github.com/MichMich/MagicMirror&quot;&gt;Magic Mirror&lt;/a&gt; software. Their tag line is “The open source modular smart mirror platform” which is truly the best way to sum it up. It takes care of most of the code for us. It has many useful modules that come by default like the time and date, calendar, weather, news, and a fun little module called compliments which regularly cycles compliments. There is a very large community around the Magic Mirror software and so has an extensive &lt;a href=&quot;https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules&quot;&gt;list of 3rd party modules&lt;/a&gt; that are often released as open source and so available to use. They are very easy to setup as well as remove and modify. It is as modular as they claim it to be. Modules are built in Javascript that generates HTML and CSS. If you can’t find something that lines up with what you want to do, there is plenty of &lt;a href=&quot;https://github.com/MichMich/MagicMirror/tree/master/modules&quot;&gt;documentation available&lt;/a&gt; to help you build your own. The committee may wind up doing this as we can’t seem to find a module that easily matches the voice control we want to have for the mirror. We fully intend to release our module as open source and are currently documenting our progress. Hopefully there will be another blog post on our adventures in module making!&lt;/p&gt;</content><author><name></name></author><summary type="html">I happen to be very involved with the Women in Computing organization at RIT. In particular I’m involved with Projects Committee, of which I’m the committee head. Every year the committee picks a project to do, this year we are doing a magic mirror or smart mirror. A magic mirror is a monitor usually hooked up to a raspberry pi where white text is displayed on a black background. The monitor is covered by a one way mirror, usually a piece of acrylic with one side see through and the other reflective. The white text shines through the see through side, creating the effect of a mirror surface that has useful text such as the time or the weather.</summary></entry></feed>